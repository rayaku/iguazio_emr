pipeline {
   agent
   { label 'evgeny66' }

    parameters {
        string(name: 'tag', defaultValue: '1.7.0_stable_offline', description: 'the build tag')
        booleanParam(name: 'depoly_node', defaultValue: true, description: 'should depoly into the node and the client.\nwill delte all the data in the node.')
        booleanParam(name: 'upload_igz_to_S3', defaultValue: true, description: 'upload the new tag to S3 for EMR use.\nif false will use the last tag that was pushed.')
        booleanParam(name: 'run_naipi', defaultValue: true, description: 'if false will not run naipi,')
        string(name: 'naipi_user', defaultValue: 'iguazio', description: 'the github user for naipi')
        string(name: 'naipi_branch', defaultValue: 'development', description: 'the naipi branch in github')
        string(name: 'naipi_parameters', defaultValue: '--cycle-definition=IG-5757', description: 'parameters for naipi')
        string(name: 'naipi_config_file', defaultValue: 'setup_EMR_naipi_integration.json', description: 'the setup file to use')
        string(name: 'kompton_branch', defaultValue: 'development', description: 'the kompton branch in github')
        string(name: 'emr_branch', defaultValue: 'development', description: 'the emr branch in github')


    }

    stages {
        stage('Get setups') {
            steps{
                dir('naipi_setup'){
                    deleteDir()
                    git branch: 'master',  url: 'git@github.com:iguazio/naipi_configs.git'
                    stash name: 'the_config_file', includes: '**'
                }
            }
        }
        stage('Deploy') {
            when {
                environment name: 'depoly_node', value: 'true'
            }
            steps{
                dir('kompton'){
                    deleteDir() 
                    git branch:'${kompton_branch}',  url:'git@github.com:iguazio/kompton.git'
                    dir('smoke'){
                        unstash 'the_config_file' 
                    }
                    sh '''./download_version.sh ${tag}
                    python smoke/prepare.py -naipiconfig=${naipi_config_file} -tagName=${tag} -naipi_user=${naipi_user} -naipi_branch=${naipi_branch} -kompton_dir=./
                    sh ./smoke/run_ansible.sh "naipi_config=${naipi_config_file} kompton_dir=$(pwd)"'''
                }
            }
        }

        stage('emr upload') {
            when {
                environment name: 'upload_igz_to_s3', value: 'true'
            }
            steps{
                dir('emr'){
                     deleteDir() 
                    git branch: '${emr_branch}',  url: 'git@github.com:iguazio/emr.git'
                    sh '''sudo chmod  -R  777 ./ 
                    ./bin/upload_emr_ver2S3.py --tag ${tag}'''
                }
            }
        }

        stage('run naipi') {
            when {
                environment name: 'run_naipi', value: 'true'
            }
            steps{
                withEnv(['VENV=./venv', 'EMR=emr/AWS/EMR/emr_install/emr-5.6.0','EMR_CONFIG=/AWS/EMR/emr_install/emr-5.6.0/config/naipi_install_emr-5.6.0.cfg']) {
                  dir('naipi'){
                     deleteDir() 
                     git branch: '${naipi_branch}',  url: 'git@github.com:${naipi_user}/naipi.git'
                     dir('naipi_configs'){
                         deleteDir()
                         unstash 'the_config_file' 
                     }
                        ansiColor('xterm') {
                            sh '''rm -rf ${VENV}
                            virtualenv ${VENV}
                            . ${VENV}/bin/activate
                            pip install -e . -r requirements.txt
                            run_naipi --setup-conf=./naipi_configs/${naipi_config_file} ${naipi_parameters}'''
                        }
                    }
                }
            }
            post{
                always{
                    dir('emr'){
                        git branch: '${emr_branch}',  url: 'git@github.com:iguazio/emr.git'
                        sh '''sudo chmod  -R  777 ./
                        //./AWS/EMR/emr_install/emr-5.6.0/terminate-emr-cluster.sh'''
                    }
                }
            }
        }
    }
}

